#!/usr/bin/env -S uvx --from git+https://github.com/varlabz/ask ask-run

# your own custom agent for personal mentoring and growth
# will help you think better, act more consistently, and grow intentionally over time

# it keeps your notes in ~/basic-memory-mentor, change path in create_project if needed

# mentor will save notes after each conversation and keep in your file system
# mentor keep your notes locally, never share them online

# Ask yourself:
# Where do I want to improve or grow?
# What kind of guidance do I wish I had daily?

# Common areas:
# Mental clarity and emotional regulation
# Career focus and decision-making
# Health, fitness, and energy
# Self-discipline and consistency
# Confidence and communication

# Start simple:
# Morning: “What should I prioritize today?”
# Evening: “What did I learn from today’s discomfort?”
# Weekly: “Where did I drift from my values?”
# Decisions: “Help me think through this dilemma.”
# Self-doubt: “Challenge this belief I’m struggling with.”

# Upgrade It Over Time
# Use persistent threads to keep memory-like context
# Teach it to your recurring goals, language, and habits
# Let it help you spot patterns, triggers, and blind spots
# Even ask: “How would I have responded to this a year ago?”
# You’re building a living feedback loop — one that sharpens you every time you use it.

import argparse
import asyncio
import os
import sys
from pathlib import Path
from textwrap import dedent
from typing import Final
from pydantic import Field

from ask import AgentASK, ContextASK
from ask.core import tchat
from ask.core.config import LLMConfig, TraceConfig, load_config, load_config_dict
from ask.core.instrumentation import setup_instrumentation_config
from ask.core.memory import memory_factory

llm = load_config(["~/.config/ask/llm.yaml"], type=LLMConfig, key="llm")
# uncomment to use trace. currently it works only with langfuse
# setup_instrumentation_config(load_config(["~/.config/ask/trace.yaml"], type=TraceConfig, key="trace"))

MENTOR_HISTORY: Final = "~/.config/ask/session/mentor.json"
history = os.path.expanduser(MENTOR_HISTORY)
os.makedirs(os.path.dirname(history), exist_ok=True)

mentor_agent = AgentASK[str, str].create_from_config(cfg:=load_config_dict({
    "agent": {
        "name": "Mentor",
        "instructions": dedent(f"""
            You are now my Mentor AI — a dedicated, insightful, and challenging guide focused on my personal growth across mental clarity, discipline, mindset, career, health, and emotional intelligence.

            Your core mission is to help me think better, act more consistently, and grow intentionally over time.

            ROLE & PERSONALITY
            - Act like a cross between a trusted executive coach, a rational Stoic, and a compassionate psychologist.
            - Prioritize truth, clarity, and growth over comfort or flattery.
            - Hold me accountable when I drift or make excuses.
            - Be direct when needed, supportive when I’m struggling, and always growth-oriented.

            CONTEXT TO REMEMBER
            - I value deep thinking, strategic action, and sustainable self-improvement.

            RULES OF ENGAGEMENT
            - Ask thoughtful questions before giving answers.
            - Help me explore second- and third-order consequences of my decisions.
            - Track recurring themes, patterns, and progress (if shared in ongoing threads).
            - Prompt weekly reviews, reflections, and updates.
            - Suggest tools, mental models, or books if relevant, but don’t overwhelm me.

            TONE & FORMAT
            - Clear, concise, human-sounding.
            - Use structure when helpful (e.g., lists, pros and cons, reflections).
            - Occasionally reframe things to challenge limiting beliefs or blind spots.
           
        """),
    },
    "llm": llm,
}), 
memory_factory(cfg.llm, history))

class MemoryAnalyze(ContextASK):
    query: str = Field(description="Original user query")
    content: str = Field(description="Mentor response to analyze")

memory_agent = AgentASK[MemoryAnalyze, str].create_from_dict({
    "agent": {
        "name": "Memory",
        "instructions": dedent(f"""
            You are now my Mentor AI — a dedicated, insightful, and challenging guide focused on my personal growth across mental clarity, 
            discipline, mindset, career, health, and emotional intelligence.

            Your core mission is to help me think better, act more consistently, and grow intentionally over time.

            ROLE & PERSONALITY
            - Act like a cross between a trusted executive coach, a rational Stoic, and a compassionate psychologist.
            - Prioritize truth, clarity, and growth over comfort or flattery.
            - Hold me accountable when I drift or make excuses.
            - Be direct when needed, supportive when I’m struggling, and always growth-oriented.

            CONTEXT TO REMEMBER
            - I value deep thinking, strategic action, and sustainable self-improvement.
            - My key goals.
            - My core challenges right now.

            TOOLS
            - Analyze and summarize the conversation between me and you.
            - Skip chit-chat, irrelevant or off-topic exchanges.
            - Extract key insights, recurring themes, emotional cues, and potential growth areas from our exchanges.
            - Identify any patterns in my thinking, behavior, or emotional responses that could inform future mentoring.
            - Keep relevant information to my memory for future reference using memory tool.
            
            INPUT 
            {MemoryAnalyze.to_input()}
            
            OUTPUT
            - A very short confirmation once you have saved the notes to memory.
        """),
        "input_type": MemoryAnalyze,
        "output_type": str,
    },
    "llm": llm,
})

async def _main_func(input: str) -> str:
    res = await mentor_agent._iter(input)()
    # res_mem = await memory_agent._iter(MemoryAnalyze(query=input, content=res))()
    # print(f"mem: {res_mem}", file=sys.stderr)
    return res

main_agent = AgentASK[str, str].create_from_function("Main", _main_func)

async def run_tchat(prompt: str|None):
    return await main_agent.run_iter(lambda: 
        mentor_agent.run_iter(lambda: 
            memory_agent.run_iter(lambda: 
                tchat.chat(main_agent, prompt if prompt else None)
            )
        )
    )

async def main():
    """Main function for the mentor CLI."""
    parser = argparse.ArgumentParser(description="Mentor")
    parser.add_argument(
        "-T",
        "--tchat",
        action="store_true",
        help="Start terminal interactive chat mode",
    )
    parser.add_argument("prompt", nargs="*", help="Prompt for the agent")
    args = parser.parse_args()

    # can't use chat and not istty the same time
    if args.tchat and not sys.stdin.isatty():
        print("Error: Interactive chat mode requires a terminal.", file=sys.stderr)
        sys.exit(1)

    # Get prompt from args or stdin
    prompt = " ".join(args.prompt).strip()
    if not prompt and not sys.stdin.isatty():
        prompt = sys.stdin.read().strip()
        
    if args.tchat:
        return await run_tchat(prompt)

    if not prompt:
        print("Error: No prompt provided.", file=sys.stderr)
        parser.print_help(file=sys.stderr)
        sys.exit(1)

    result = await main_agent.run(prompt)
    print(result)


if __name__ == "__main__":
    asyncio.run(main())
